::::::;::::::::::::::::::::::::::::
import openpyxl
import os
import win32com.client as win32  # Solo en Windows

# -------------------------------
# Configuración
# -------------------------------
excel_origen = "datos.xlsx"
hoja_origen = "HojaDatos"

excel_template = "template.xlsx"
hoja_destino = "Formato"

excel_salida = "rellenado.xlsx"
pdf_salida = "resultado.pdf"

# -------------------------------
# Cargar archivos
# -------------------------------
wb_origen = openpyxl.load_workbook(excel_origen, data_only=True)
ws_origen = wb_origen[hoja_origen]

wb_template = openpyxl.load_workbook(excel_template)
ws_template = wb_template[hoja_destino]

# -------------------------------
# Pasar datos sin perder formato
# -------------------------------
# ⚠️ Aquí solo reemplazamos el "valor", el formato queda intacto
fila_destino = 2  # por ejemplo, desde fila 2 en el template
for fila in range(2, ws_origen.max_row + 1):
    valor = ws_origen[f"A{fila}"].value
    if valor is not None:
        # IMPORTANTE: asignar valor directo, así no se rompe el formato
        ws_template.cell(row=fila_destino, column=2).value = valor
    fila_destino += 1

# Guardar con datos insertados (manteniendo estilos)
wb_template.save(excel_salida)

# -------------------------------
# Exportar a PDF con Excel (mantiene formato)
# -------------------------------
excel = win32.Dispatch("Excel.Application")
excel.Visible = False

wb = excel.Workbooks.Open(os.path.abspath(excel_salida))
wb.Worksheets(hoja_destino).Select()
wb.ActiveSheet.ExportAsFixedFormat(0, os.path.abspath(pdf_salida))
wb.Close()
excel.Quit()

print("✅ Proceso completado. PDF generado:", pdf_salida)











,...............................
import openpyxl
import os
import win32com.client as win32  # Solo en Windows

# -------------------------------
# 1. Cargar archivos
# -------------------------------
excel_origen = "datos.xlsx"
excel_template = "template.xlsx"
excel_salida = "rellenado.xlsx"
pdf_salida = "resultado.pdf"

# Abrir el archivo origen
wb_origen = openpyxl.load_workbook(excel_origen)
ws_origen = wb_origen.active

# Abrir el archivo template
wb_template = openpyxl.load_workbook(excel_template)
ws_template = wb_template.active

# -------------------------------
# 2. Pasar datos del origen al template
#    (ejemplo: copiar nombres de la columna A al template)
# -------------------------------
fila_destino = 2  # Suponiendo que en el template la fila 1 son encabezados
for fila in range(2, ws_origen.max_row + 1):
    valor = ws_origen[f"A{fila}"].value
    ws_template[f"A{fila_destino}"] = valor
    fila_destino += 1

# Guardar el template con los datos
wb_template.save(excel_salida)

# -------------------------------
# 3. Exportar a PDF (requiere MS Excel instalado en Windows)
# -------------------------------
excel = win32.Dispatch("Excel.Application")
excel.Visible = False

wb = excel.Workbooks.Open(os.path.abspath(excel_salida))
wb.ExportAsFixedFormat(0, os.path.abspath(pdf_salida))  # 0 = PDF
wb.Close()
excel.Quit()

print("✅ Proceso completado. PDF generado:", pdf_salida)







....................
Cómo integrarlo en tu código existente
from pypdf import PdfReader, PdfWriter

reader = PdfReader("mi_archivo.pdf")
writer = PdfWriter()

# ... otros pasos existentes (añadir páginas, modificar contenido, etc.) ...

writer.write("output.pdf")

Simplemente inserta el bucle de rotación justo antes de escribir:

for page in reader.pages:
    page.rotate(90)
    writer.add_page(page)

with open("output_horizontal.pdf", "wb") as f:
    writer.write(f)

--------------------------------------------------------------------
EJM Integrado 

from pypdf import PdfReader, PdfWriter

reader = PdfReader("entrada.pdf")
writer = PdfWriter()

# Aquí podrías modificar páginas, texto, combinarlas, etc.

# Ahora rotamos a apaisado
for page in reader.pages:
    page.rotate(90)
    writer.add_page(page)

with open("salida_horizontal.pdf", "wb") as f:
    writer.write(f)
