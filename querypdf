import pandas as pd
from pandasql import sqldf
from fpdf import FPDF

# 1. Leer archivo Excel y seleccionar columnas específicas
# Reemplaza 'archivo.xlsx' por el nombre del archivo real.
usecols = ['Columna1', 'Columna2', 'Columna3']
df = pd.read_excel('archivo.xlsx', usecols=usecols)

# 2. Ejecutar consulta SQL sobre el DataFrame
pysqldf = lambda q: sqldf(q, locals())
query = """
SELECT Columna1, Columna2 
FROM df
WHERE Columna3 > 100
"""
resultado = pysqldf(query)

# 3. Generar PDF con los resultados
pdf = FPDF()
pdf.add_page()
pdf.set_font("Arial", size=12)

# Agrega una cabecera al PDF
if not resultado.empty:
    header = ' | '.join(resultado.columns)
    pdf.cell(200, 10, txt=header, ln=True)

# Agrega cada fila del resultado
for _, row in resultado.iterrows():
    linea = ' | '.join(str(val) for val in row)
    pdf.cell(200, 10, txt=linea, ln=True)

# Guardar el PDF
pdf.output("reporte.pdf")
print("PDF generado: reporte.pdf")
----------------------------------------------------------------------------------------------------------------------------------------------
Test 2
import pandas as pd
from pandasql import sqldf
from fpdf import FPDF

# Parámetros configurables
archivo = 'archivo.xlsx'
hoja = 'NombreDeHoja'  # O usa un número, p. ej. hoja = 1 para la segunda hoja
usecols = ['Columna1', 'Columna2', 'Columna3']

# 1. Leer archivo Excel desde una hoja específica con columnas seleccionadas
df = pd.read_excel(archivo, sheet_name=hoja, usecols=usecols)

# 2. Ejecutar consulta SQL sobre el DataFrame
pysqldf = lambda q: sqldf(q, locals())
query = """
SELECT Columna1, Columna2
FROM df
WHERE Columna3 > 100
"""
resultado = pysqldf(query)

# 3. Generar PDF con los resultados
pdf = FPDF()
pdf.add_page()
pdf.set_font("Arial", size=12)

if not resultado.empty:
    header = ' | '.join(resultado.columns)
    pdf.cell(200, 10, txt=header, ln=True)

for _, row in resultado.iterrows():
    linea = ' | '.join(str(val) for val in row)
    pdf.cell(200, 10, txt=linea, ln=True)

pdf.output("reporte.pdf")
print("PDF generado: reporte.pdf")
--------------------------------------------------------------------------------------------------------------------------------------
TEST #3 (Consulta las hojas de excel y no las tablas)
import pandas as pd
from pandasql import sqldf
from fpdf import FPDF

# Parámetros configurables
archivo = 'archivo.xlsx'
hoja = 'EDOIM'
usecols = ['Unnamed: 0', 'Unnamed: 1', 'Unnamed: 2']

# 1. Leer solo la hoja EDOIM y las columnas deseadas
df = pd.read_excel(archivo, sheet_name=hoja, usecols=usecols)
print("Columnas cargadas:", df.columns.tolist())

# 2. Crear consulta SQL que opere directamente sobre el DataFrame df
pysqldf = lambda q: sqldf(q, locals())
query = """
SELECT "Unnamed: 0" AS Col0,
       "Unnamed: 1" AS Col1
FROM df
WHERE "Unnamed: 2" > 100
"""
resultado = pysqldf(query)

# 3. Generar PDF con los resultados
pdf = FPDF()
pdf.add_page()
pdf.set_font("Arial", size=12)

if not resultado.empty:
    header = ' | '.join(resultado.columns)
    pdf.cell(0, 10, txt=header, ln=True)

for _, row in resultado.iterrows():
    linea = ' | '.join(str(val) for val in row)
    pdf.cell(0, 10, txt=linea, ln=True)

pdf.output("reporte.pdf")
print("PDF generado: reporte.pdf")
